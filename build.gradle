buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

apply from: "${rootProject.projectDir}/gradle/versions.gradle"

allprojects {
    ext {
        appVersion = '0.1.2'
        appGroup = 'nl.mplatvoet.komponents'

        kotlinVersion = '0.11.91'
        junitVersion = '4.12'

        sonatypeUsr = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
        sonatypePwd = project.hasProperty('sonatypePassword') ? sonatypePassword : ''
    }
}



subprojects {
    repositories { mavenCentral() }

    apply plugin: 'optional-base'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'signing'

    compileJava {
        sourceCompatibility = "1.6"
        targetCompatibility = "1.6"
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}", optional

        testCompile "junit:junit:${junitVersion}"
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }


    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }

    task releaseSub {
        dependsOn signArchives
    }



    uploadArchives {
        dependsOn releaseSub

        repositories.mavenDeployer {
            configuration = configurations.archives

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }


            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsr, password: sonatypePwd)
            }


            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'http://kovenant.mplatvoet.nl'
                inceptionYear '2015'

                scm {
                    url 'https://github.com/mplatvoet/kovenant'
                    connection 'scm:git:git@github.com:mplatvoet/kovenant.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'mplatvoet'
                        name 'Mark Platvoet'
                        email 'mplatvoet@gmail.com'
                        url 'http://mplatvoet.nl'
                    }
                }

                issueManagement {
                    system = "YouTrack"
                    url = "http://komponents.myjetbrains.com/youtrack/issues?q=project%3A+Kovenant"
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    def branchName = System.getenv('CIRCLE_BRANCH')?.trim()

    if (!'master'.equals(branchName) && !taskGraph.hasTask(release)) {
        enrichVersion()
    } else {
        allprojects*.version = appVersion
    }
    allprojects*.group = appGroup
}

task jars() {
    dependsOn subprojects.jar, subprojects.sourcesJar, subprojects.javadocJar
}

task release {
    dependsOn subprojects.releaseSub
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4-rc-1'
}




defaultTasks 'clean', 'jars'


