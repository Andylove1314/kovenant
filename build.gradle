version = '0.1.0'


buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91'
    }
}

repositories { mavenCentral() }

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.11.91'
    testCompile 'junit:junit:4.12'
}



gradle.taskGraph.whenReady { taskGraph ->
    enrichVersion()
    setLibsDir()
}

def setLibsDir() {
    def artifactsPath = System.getenv('CIRCLE_ARTIFACTS')?.trim()
    if (artifactsPath) {
        def libsDir = new File(artifactsPath, "libs")
        if (libsDir.mkdirs()) {
            jar {
                destinationDir = projectDir
            }
        }
    }
}

def enrichVersion() {
    def circleBuildNr = System.getenv('CIRCLE_BUILD_NUM')?.trim()
    def buildMetaData = circleBuildNr ? circleBuildNr : buildTime()

    def kotlinVersion = extractKotlinMilestoneVersion()
    println kotlinVersion
    def identifier = kotlinVersion ? "kotlinM$kotlinVersion" : "unknown"

    version = "$version-$identifier+$buildMetaData"
}

String extractKotlinMilestoneVersion() {
    def rawVersion = extractRawKotlinVersion()
    if (rawVersion) {
        def matcher = rawVersion =~ /\d+/
        matcher.find()
        matcher.find(matcher.end())
        return rawVersion.substring(matcher.start(), matcher.end())
    }
    return null
}

String extractRawKotlinVersion() {
    for (scope in rootProject.configurations.all) {

        for (dep in scope.dependencies) {
            def name = dep.name.toString()
            def group = dep.group.toString()
            if (name.equals("kotlin-stdlib") && group.equals("org.jetbrains.kotlin")) {
                println dep.version
                return dep.version
            }

        }

    }
    return null
}


def buildTime() {
    def df = new java.text.SimpleDateFormat("yyyyMMdd'T'HHmm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

task libs() {
    dependsOn jar
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

defaultTasks 'clean', 'libs'


